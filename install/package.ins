#
# package.ins: Carrier Independent installation.
#   All required files must be located in the current directory.
#   The files are not removed.
#
# Syntax on how to use this package.ins:
#   sh ./package.ins -m -i -s [<install_path>]
#
#   options
#     -m specifies to skip MD5 sumchecking.
#     -i specifies interactive installation, default all
#        questions will be answered with Yes.
#     -s install single version (revision subdirectory is
#        is not created, which is normally used to support
#        multiple versions).
#   If <install_path> is omitted, "/opt/OpenSplice"
#     is used as the default installation path.
#   The installation path is extended with the release
#     indicator (unless suppressed) and the hardware platform
#     and operating system.
#
. ./RELEASE

carrier_file=`ls OpenSplice_*.tar`
PACKAGE_ENV=`expr "$carrier_file" : 'OpenSplice_\(.*\)_.*\.tar'`
PACKAGE_TARGET=`expr "$carrier_file" : 'OpenSplice_..._\(.*\)\.tar'`
DEFAULT_INSTALL_PATH=/opt/OpenSplice

create_dir ()
{
    DIR=$1
    ask=$2
    if [ "$ask" = "yes" ]
    then
        if [ ! -d $DIR ]
        then
            c="?"
            while [ "$c" != "Y" -a "$c" != "N" -a "$c" != "A" ]
            do
	        printf "$DIR does not exist, shall I create it [Yes/No/Abort] : "
                read c
                c=`echo ${c} | tr [a-z] [A-Z]`
            done
            if [ "$c" = "A" ]
            then
	        echo
	        echo "==> Aborting ..."
	        echo
	        exit 0
            elif [ "$c" = "Y" ]
            then
	        mkdir -p $DIR 2> /dev/null
	        if [ ! -d $DIR ]
	        then
	            echo
	            echo "==> Creation of $DIR failed, bailing out"
	            echo
	            exit 1
	        fi
	    fi
        fi
        if [ ! -d $DIR ]
        then
            echo
            echo "==> $DIR still does not exist, bailing out"
            echo
            exit 1
        fi
    else
        mkdir -p $DIR 2> /dev/null
        if [ ! -d $DIR ]
        then
            echo
            echo "==> Creation of $DIR failed, bailing out"
            echo
            exit 1
        fi
    fi
}

remove_dir ()
{
    DIR=$1
    ask=$2
    if [ "$ask" = "yes" ]
    then
        if [ -d $DIR ]
        then
            c="?"
            while [ "$c" != "Y" -a "$c" != "N" -a "$c" != "A" ]
            do
	        printf "$DIR does already exist, shall I remove it [Yes/No/Abort] : "
                read c
                c=`echo ${c} | tr [a-z] [A-Z]`
            done
            if [ "$c" = "A" ]
            then
	        echo
	        echo "==> Aborting ..."
	        echo
	        exit 0
            elif [ "$c" = "Y" ]
            then
		chmod -Rf 777 $DIR
	        rm -rf $DIR
	        if [ -d $DIR ]
	        then
	            echo
	            echo "==> Removal of $DIR failed, bailing out"
	            echo
	            exit 1
	        fi
	    fi
        fi
        if [ -d $DIR ]
        then
            echo
            echo "==> $DIR still does exist, bailing out"
            echo
            exit 1
        fi
    else
	chmod -Rf 777 $DIR
        rm -rf $DIR
        if [ -d $DIR ]
        then
            echo
            echo "==> Removal of $DIR failed, bailing out"
            echo
            exit 1
        fi
    fi
}

check_md5sum ()
{
    md5sum --help 2> /dev/null > /dev/null
    md5=$?
    if [ $md5 -eq 0 -a -f md5.sum ]
    then
	echo
        echo "Computing MD5 checksums (take a break)"
	echo
	rm -f /tmp/md5_$$.sum
        find . -type f -exec md5sum {} \; | tee /tmp/md5_$$.sum
	echo
        echo "Checking MD5 checksums"
	echo
	sum_error="no"
	while read sum_line
	do
	    new_sum_line=`grep "$sum_line" /tmp/md5_$$.sum`
	    if [ -z "$new_sum_line" ]
	    then
		echo "==> Check error for : $sum_line"
		sum_error="yes"
	    else
		echo "    Check OK for    : $sum_line"
	    fi
	done < md5.sum
	rm -f /tmp/md5_$$.sum
	if [ "$sum_error" = "yes" ]
	then
            echo
            echo "==> Checksum error detected, bailing out"
            echo
            exit 1
	fi
    else
        echo "==> Cannot compute MD5 checksums, skipping check"
    fi
}

update_releasefile ()
{
    OSPL_HOME=$1

    chmod +w $OSPL_HOME/release.com
    (ex $OSPL_HOME/release.com <<!
%s#<RELEASE>#$PACKAGE_VERSION#
%s#<DATE>#$PACKAGE_DATE#
%s#OSPL_HOME=.*#OSPL_HOME=$OSPL_HOME#
w
q
!
    ) > /dev/null
    chmod -w $OSPL_HOME/release.com
    HOME_LINE=`grep "OSPL_HOME=" $OSPL_HOME/release.com`
    HOME_DEF=`expr "$HOME_LINE" : '.*OSPL_HOME=\(.*\)'`
    if [ "$HOME_DEF" != "$OSPL_HOME" ]
    then
	echo
	echo "==> release.com file could not be adapted correctly, bailing out"
	echo
	exit 1
    fi
}

update_configfile ()
{
    OSPL_HOME=$1

    if [ -f $OSPL_HOME/etc/config/ospl.xml ]
    then
        chmod +w $OSPL_HOME/etc/config/ospl.xml
        (ex $OSPL_HOME/etc/config/ospl.xml <<!
%s#<RELEASE>#$PACKAGE_VERSION#
w
q
!
        ) > /dev/null
        chmod -w $OSPL_HOME/etc/config/ospl.xml
        LINE=`grep "<Name>OpenSplice" $OSPL_HOME/etc/config/ospl.xml`
        DEF=`expr "$LINE" : '.*<Name>OpenSplice\(.*\)</Name>'`
        if [ "$DEF" != "$PACKAGE_VERSION" ]
        then
	    echo
	    echo "==> ospl.xml file could not be adapted correctly, bailing out"
	    echo
	    exit 1
        fi
    fi
}

check_path_for_abortion ()
{
    IP=$1
    ask=$2

    check="no"
    case $IP in
    /nfs/*)
	check=yes
	reason="path is starting with /nfs/___"
	;;
    *)
	upref=`echo $IP | grep "\.\."`
	if [ -n "$upref" ]
	then
	    check=yes
	    reason="path contains parent reference ___/../___"
	fi
    esac
    if [ "$check" = yes ]
    then
        if [ "$ask" = yes ]
        then
	    echo "The install path contains unwanted features: $reason"
            c="?"
            while [ "$c" != "Y" -a "$c" != "A" ]
            do
	        printf "Do you want to continue [Yes/Abort] : "
                read c
                c=`echo ${c} | tr [a-z] [A-Z]`
            done
            if [ "$c" = "A" ]
            then
	        echo
	        echo "==> Aborting ..."
	        echo
	        exit 0
	    fi
	else
	    echo "The install path contains unwanted features: $reason"
	    echo "You are advised to reinstall the package with another install path"
	fi
    fi
}

echo
echo "<<< Install $PACKAGE_NAME $PACKAGE_ENV - Release ${PACKAGE_VERSION} - For $PACKAGE_TARGET - Dated $PACKAGE_DATE >>>"
echo

#
# set the default umask
#
umask 022

#
# prepare some derived variables
#
PACKAGE_NAME_LC=`echo ${PACKAGE_NAME} | tr [A-Z] [a-z]`
PACKAGE_NAME_UC=`echo ${PACKAGE_NAME} | tr [a-z] [A-Z]`

INSTALL_PATH=$DEFAULT_INSTALL_PATH
interactive="no"
md5sumcheck="yes"
versionpath="yes"
for arg in $*
do
    case $arg in
    -i)
	interactive="yes";;
    -m)
	md5sumcheck="no";;
    -s)
	versionpath="no";;
    -*)
	echo "Invalid option \"$arg\" ignored";;
    *)
	if [ "$INSTALL_PATH" != "$DEFAULT_INSTALL_PATH" ]
	then
	    echo "Abundant install path \"$arg\" ignored"
	else
	    INSTALL_PATH=$arg
	fi ;;
    esac
done

case $INSTALL_PATH in
    /*) ;;
    *)  INSTALL_PATH=`pwd`/$INSTALL_PATH;;
esac
check_path_for_abortion $INSTALL_PATH $interactive
if [ "$versionpath" = "yes" ]
then
    INSTALL_PATH=$INSTALL_PATH/$PACKAGE_VERSION
fi
echo "Install path : $INSTALL_PATH/$PACKAGE_TARGET"

create_dir $INSTALL_PATH $interactive
remove_dir $INSTALL_PATH/$PACKAGE_TARGET $interactive

CWD=`pwd`
cd $INSTALL_PATH

echo
echo "Extracting package $PACKAGE_NAME $PACKAGE_ENV"
tar xf $CWD/$carrier_file 2> /tmp/$$untar.log
if [ $? -ne 0 ]
then
    echo
    echo "==> Failures detected extracting package $PACKAGE_NAME $PACKAGE_ENV:"
    echo
    cat /tmp/$$untar.log
    rm -f /tmp/$$untar.log
    echo
    echo "==> Bailing out because of detected failures while unpacking"
    echo
    exit 1
fi
rm -f /tmp/$$untar.log

cd $PACKAGE_TARGET
if [ "$md5sumcheck" = yes ]
then
    check_md5sum
fi
cd $CWD

update_releasefile $INSTALL_PATH/$PACKAGE_TARGET
update_configfile $INSTALL_PATH/$PACKAGE_TARGET

echo
echo "<<< Installation of $PACKAGE_NAME $PACKAGE_ENV - Release ${PACKAGE_VERSION} - For $PACKAGE_TARGET - Dated $PACKAGE_DATE is completed >>>"
echo
